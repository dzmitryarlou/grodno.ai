import { supabase } from './supabaseClient';

export interface EmailNotification {
  recipient: string;
  subject: string;
  body: string;
}

export interface SMTPSettings {
  host: string;
  port: number;
  secure: boolean;
  user: string;
  pass: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP
export const getSMTPSettings = async (): Promise<SMTPSettings | null> => {
  try {
    const { data, error } = await supabase
      .from('email_settings')
      .select('setting_value')
      .eq('setting_key', 'smtp_settings')
      .single();

    if (error) {
      console.error('Error fetching SMTP settings:', error);
      return null;
    }

    return data?.setting_value as SMTPSettings;
  } catch (error) {
    console.error('Error getting SMTP settings:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP
export const saveSMTPSettings = async (settings: SMTPSettings): Promise<boolean> => {
  try {
    const { data, error } = await supabase.rpc('simple_save_smtp_settings', {
      host_param: settings.host,
      port_param: settings.port,
      secure_param: settings.secure,
      user_param: settings.user,
      pass_param: settings.pass
    });

    if (error) {
      console.error('Error saving SMTP settings:', error);
      return false;
    }

    console.log('SMTP settings saved successfully');
    return true;
  } catch (error) {
    console.error('Error saving SMTP settings:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Edge Function
export const sendEmailNotification = async (notification: EmailNotification): Promise<void> => {
  try {
    console.log('üöÄ Starting email notification process');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
    const smtpSettings = await getSMTPSettings();
    
    if (!smtpSettings || !smtpSettings.host || !smtpSettings.user) {
      console.warn('‚ö†Ô∏è SMTP settings not configured properly');
      await logEmailAttempt(notification, 'SMTP not configured');
      throw new Error('SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SMTP –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }

    console.log('üìß Sending email via Edge Function');
    console.log('üìç SMTP Host:', smtpSettings.host);
    console.log('üë§ SMTP User:', smtpSettings.user);
    console.log('üì® To:', notification.recipient);
    console.log('üìù Subject:', notification.subject);

    // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    const { data, error } = await supabase.functions.invoke('send-email', {
      body: {
        to: notification.recipient,
        subject: notification.subject,
        html: notification.body.replace(/\n/g, '<br>'),
        smtp: smtpSettings
      }
    });

    if (error) {
      console.error('‚ùå Error from Edge Function:', error);
      await logEmailAttempt(notification, `Edge Function Error: ${error.message}`);
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${error.message}`);
    }

    if (data?.success) {
      console.log('‚úÖ Email sent successfully via Edge Function');
      await logEmailAttempt(notification, 'Sent successfully via Edge Function');
    } else {
      console.error('‚ùå Email sending failed:', data?.error);
      await logEmailAttempt(notification, `Failed: ${data?.error || 'Unknown error'}`);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email: ${data?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    
  } catch (error: any) {
    console.error('üí• Critical error in sendEmailNotification:', error);
    await logEmailAttempt(notification, `Critical Error: ${error.message}`);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const logEmailAttempt = async (notification: EmailNotification, status: string) => {
  try {
    const { error } = await supabase
      .from('activity_logs')
      .insert([{
        user_id: null,
        action: 'email_notification_attempt',
        details: {
          recipient: notification.recipient,
          subject: notification.subject,
          status: status,
          timestamp: new Date().toISOString(),
          method: 'frontend_service'
        }
      }]);

    if (error) {
      console.error('Error logging email attempt:', error);
    }
  } catch (error) {
    console.error('Error logging email attempt:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö
export const notifyAdminsOfNewRegistration = async (registration: {
  name: string;
  email?: string;
  phone: string;
  telegram: string;
  courseName: string;
  createdAt: string;
}): Promise<void> => {
  try {
    console.log('üì¢ Notifying admins of new registration');

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
    const { data: emailSettings, error: settingsError } = await supabase
      .from('email_settings')
      .select('setting_value')
      .eq('setting_key', 'admin_emails')
      .single();

    if (settingsError) {
      console.error('Error fetching admin email settings:', settingsError);
      return;
    }

    const adminEmails = emailSettings?.setting_value || ['dzmitry.arlou@grodno.ai'];
    console.log('üë• Admin emails:', adminEmails);

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω email
    const { data: template, error: templateError } = await supabase
      .from('email_templates')
      .select('subject, body_template')
      .eq('template_name', 'new_registration')
      .eq('is_active', true)
      .single();

    if (templateError) {
      console.error('Error fetching email template:', templateError);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
    let emailBody = template?.body_template || `–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –ò–ò –ö–ª—É–±–µ!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
üë§ –ò–º—è: {{name}}
üìß Email: {{email}}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {{phone}}
üí¨ Telegram: {{telegram}}
üéì –ö—É—Ä—Å: {{courseName}}
üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {{createdAt}}

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`;

    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    emailBody = emailBody
      .replace(/\{\{name\}\}/g, registration.name)
      .replace(/\{\{email\}\}/g, registration.email || '–ù–µ —É–∫–∞–∑–∞–Ω')
      .replace(/\{\{phone\}\}/g, registration.phone)
      .replace(/\{\{telegram\}\}/g, registration.telegram)
      .replace(/\{\{course_name\}\}/g, registration.courseName)
      .replace(/\{\{courseName\}\}/g, registration.courseName)
      .replace(/\{\{created_at\}\}/g, new Date(registration.createdAt).toLocaleString('ru-RU'))
      .replace(/\{\{createdAt\}\}/g, new Date(registration.createdAt).toLocaleString('ru-RU'));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const emailPromises = adminEmails.map((email: string) => 
      sendEmailNotification({
        recipient: email,
        subject: template?.subject || '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ - –ò–ò –ö–ª—É–±',
        body: emailBody
      })
    );

    await Promise.all(emailPromises);
    console.log('‚úÖ All admin notifications sent successfully');
    
  } catch (error) {
    console.error('üí• Error notifying admins:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–∏—Å—Ç–µ–º—ã
export const testEmailNotification = async (): Promise<void> => {
  try {
    console.log('üß™ Starting email system test');
    
    const { data, error } = await supabase.rpc('simple_test_email_notification');

    if (error) {
      console.error('Error in test function:', error);
      throw new Error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }

    if (data?.success) {
      console.log('‚úÖ Email test completed successfully');
    } else {
      console.error('‚ùå Email test failed:', data?.error);
      throw new Error(`–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: ${data?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  } catch (error: any) {
    console.error('üí• Error in testEmailNotification:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ email —Å–∏—Å—Ç–µ–º—ã
export const diagnoseEmailSystem = async (): Promise<any> => {
  try {
    const { data, error } = await supabase.rpc('diagnose_email_system');

    if (error) {
      console.error('Error in diagnosis function:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Error diagnosing email system:', error);
    throw error;
  }
};